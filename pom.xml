<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.jenkins-ci.plugins</groupId>
        <artifactId>plugin</artifactId>
        <version>2.3</version><!-- which version of Jenkins is this plugin built against? -->
    </parent>

    <groupId>puppetlabs</groupId>
    <artifactId>puppet-gatling-jenkins-plugin</artifactId>
    <version>2.1.2-SNAPSHOT</version>
    <packaging>hpi</packaging>

     <!--this setup will allow us to deploy to private nexus -->
    <distributionManagement>
      <snapshotRepository>
        <id>pl-nexus-snapshots</id>
        <name>PL Nexus Snapshots</name>
        <url>http://nexus.delivery.puppetlabs.net/content/repositories/snapshots/</url>
      </snapshotRepository>
      <repository>
        <id>pl-nexus-releases</id>
        <name>PL Nexus Releases</name>
        <url>http://nexus.delivery.puppetlabs.net/content/repositories/releases/</url>
      </repository>
    </distributionManagement>

    <!-- get every artifact through repo.jenkins-ci.org, which proxies all the artifacts that we need -->
    <repositories>
        <repository>
            <id>repo.jenkins-ci.org</id>
            <url>http://repo.jenkins-ci.org/public/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>repo.jenkins-ci.org</id>
            <url>http://repo.jenkins-ci.org/public/</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <dependency>
            <groupId>org.jenkins-ci.plugins</groupId>
            <artifactId>gatling</artifactId>
            <version>1.2.0</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.4.4</version>
        </dependency>

        <dependency>
            <groupId>org.mozilla</groupId>
            <artifactId>rhino</artifactId>
            <version>1.7.7.1</version>
        </dependency>

        <dependency>
            <groupId>org.jenkins-ci.plugins.workflow</groupId>
            <artifactId>workflow-step-api</artifactId>
            <version>1.14</version>
        </dependency>

        <dependency>
            <groupId>org.jenkins-ci.plugins.workflow</groupId>
            <artifactId>workflow-durable-task-step</artifactId>
            <version>1.14</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jenkins-ci.plugins.workflow</groupId>
            <artifactId>workflow-basic-steps</artifactId>
            <version>1.14</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!--
        yuck.  So, this profile will only be enabled if the JDK is 8 or higher.
        Here's the deal: In Java8, there was some linting added for javadocs,
        and it's supposed to be enabled by default... but it does not actually
        appear to be enabled in some JDK8 builds, such as those in the ubuntu
        14.04 PPAs.  It *is* enabled by default on OSX.

        We had some javadoc issues in this repo, which were preventing the
        project from being able to be built on OSX JDK8, even though it built
        fine on JDK7 and Ubuntu's JDK8.

        So, what we want to do here is to add a command-line arg that will
        enable the linting on all JDK8s.  However, you *can't* pass the flag to
        a JDK7 or it will fail because it doesn't recognize the flag.  So here,
        we define a property containing the CLI arg, but *only* for JDK8 and
        higher.  We can then use that property in the configuration for the
        javadoc plugin, so that the flag will be passed for JDK8 but not JDK7.
    -->
    <profiles>
        <profile>
            <id>doclint-java8-enable</id>
            <activation>
                <jdk>[1.8,)</jdk>
            </activation>
            <properties>
                <javadoc.opts>-Xdoclint:all</javadoc.opts>
            </properties>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                            <configuration>
                                <!-- see comments above 'profiles' above for an
                                     explanation of this hack. -->
                                <additionalparam>${javadoc.opts}</additionalparam>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
